#include <limits.h>
#include <stdio.h>

// Function to find the minimum number of scalar multiplications needed
int MatrixChainOrder(int p[], int i, int j) {
    if (i == j)
        return 0;
    int k;
    int min = INT_MAX;
    int count;

    // Place parenthesis at different places between first and last matrix,
    // recursively calculate count of multiplications for each parenthesis placement
    // and return the minimum count
    for (k = i; k < j; k++) {
        count = MatrixChainOrder(p, i, k) + MatrixChainOrder(p, k + 1, j) + p[i - 1] * p[k] * p[j];

        if (count < min)
            min = count;
    }

    // Return minimum count
    return min;
}

// Driver code
int main() {
    int N;

    // Input number of matrices
    printf("Enter the number of matrices: ");
    scanf("%d", &N);

    // Array to store dimensions
    int arr[N + 1];

    // Input dimensions
    printf("Enter the dimensions: ");
    for (int i = 0; i <= N; i++) {
        scanf("%d", &arr[i]);
    }

    // Function call
    printf("Minimum number of multiplications is %d\n", MatrixChainOrder(arr, 1, N));

    return 0;
}
