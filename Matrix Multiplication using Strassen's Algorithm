#include <stdio.h>
#include <stdlib.h>

// Function to add two matrices
void addMatrices(int n, int **A, int **B, int **C) {
    for (int i = 0; i < n; i++)
        for (int j = 0; j < n; j++)
            C[i][j] = A[i][j] + B[i][j];
}

// Function to subtract two matrices
void subtractMatrices(int n, int **A, int **B, int **C) {
    for (int i = 0; i < n; i++)
        for (int j = 0; j < n; j++)
            C[i][j] = A[i][j] - B[i][j];
}

// Function to recursively multiply two matrices using Strassen's algorithm
void strassenMultiply(int n, int **A, int **B, int **C) {
    if (n == 1) {
        C[0][0] = A[0][0] * B[0][0];
        return;
    }

    int newSize = n / 2;
    int **A11 = malloc(newSize * sizeof(int *));
    int **A12 = malloc(newSize * sizeof(int *));
    int **A21 = malloc(newSize * sizeof(int *));
    int **A22 = malloc(newSize * sizeof(int *));
    int **B11 = malloc(newSize * sizeof(int *));
    int **B12 = malloc(newSize * sizeof(int *));
    int **B21 = malloc(newSize * sizeof(int *));
    int **B22 = malloc(newSize * sizeof(int *));
    int **C11 = malloc(newSize * sizeof(int *));
    int **C12 = malloc(newSize * sizeof(int *));
    int **C21 = malloc(newSize * sizeof(int *));
    int **C22 = malloc(newSize * sizeof(int *));
    int **M1 = malloc(newSize * sizeof(int *));
    int **M2 = malloc(newSize * sizeof(int *));
    int **M3 = malloc(newSize * sizeof(int *));
    int **M4 = malloc(newSize * sizeof(int *));
    int **M5 = malloc(newSize * sizeof(int *));
    int **M6 = malloc(newSize * sizeof(int *));
    int **M7 = malloc(newSize * sizeof(int *));
    for (int i = 0; i < newSize; i++) {
        A11[i] = malloc(newSize * sizeof(int));
        A12[i] = malloc(newSize * sizeof(int));
        A21[i] = malloc(newSize * sizeof(int));
        A22[i] = malloc(newSize * sizeof(int));
        B11[i] = malloc(newSize * sizeof(int));
        B12[i] = malloc(newSize * sizeof(int));
        B21[i] = malloc(newSize * sizeof(int));
        B22[i] = malloc(newSize * sizeof(int));
        C11[i] = malloc(newSize * sizeof(int));
        C12[i] = malloc(newSize * sizeof(int));
        C21[i] = malloc(newSize * sizeof(int));
        C22[i] = malloc(newSize * sizeof(int));
        M1[i] = malloc(newSize * sizeof(int));
        M2[i] = malloc(newSize * sizeof(int));
        M3[i] = malloc(newSize * sizeof(int));
        M4[i] = malloc(newSize * sizeof(int));
        M5[i] = malloc(newSize * sizeof(int));
        M6[i] = malloc(newSize * sizeof(int));
        M7[i] = malloc(newSize * sizeof(int));
    }

    for (int i = 0; i < newSize; i++) {
        for (int j = 0; j < newSize; j++) {
            A11[i][j] = A[i][j];
            A12[i][j] = A[i][j + newSize];
            A21[i][j] = A[i + newSize][j];
            A22[i][j] = A[i + newSize][j + newSize];

            B11[i][j] = B[i][j];
            B12[i][j] = B[i][j + newSize];
            B21[i][j] = B[i + newSize][j];
            B22[i][j] = B[i + newSize][j + newSize];
        }
    }

    int **temp1 = malloc(newSize * sizeof(int *));
    int **temp2 = malloc(newSize * sizeof(int *));
    for (int i = 0; i < newSize; i++) {
        temp1[i] = malloc(newSize * sizeof(int));
        temp2[i] = malloc(newSize * sizeof(int));
    }

    addMatrices(newSize, A11, A22, temp1);
    addMatrices(newSize, B11, B22, temp2);
    strassenMultiply(newSize, temp1, temp2, M1);

    addMatrices(newSize, A21, A22, temp1);
    strassenMultiply(newSize, temp1, B11, M2);

    subtractMatrices(newSize, B12, B22, temp2);
    strassenMultiply(newSize, A11, temp2, M3);

    subtractMatrices(newSize, B21, B11, temp2);
    strassenMultiply(newSize, A22, temp2, M4);

    addMatrices(newSize, A11, A12, temp1);
    strassenMultiply(newSize, temp1, B22, M5);

    subtractMatrices(newSize, A21, A11, temp1);
    addMatrices(newSize, B11, B12, temp2);
    strassenMultiply(newSize, temp1, temp2, M6);

    subtractMatrices(newSize, A12, A22, temp1);
    addMatrices(newSize, B21, B22, temp2);
    strassenMultiply(newSize, temp1, temp2, M7);

    for (int i = 0; i < newSize; i++) {
        for (int j = 0; j < newSize; j++) {
            C11[i][j] = M1[i][j] + M4[i][j] - M5[i][j] + M7[i][j];
            C12[i][j] = M3[i][j] + M5[i][j];
            C21[i][j] = M2[i][j] + M4[i][j];
            C22[i][j] = M1[i][j] - M2[i][j] + M3[i][j] + M6[i][j];
        }
    }

    for (int i = 0; i < newSize; i++) {
        for (int j = 0; j < newSize; j++) {
            C[i][j] = C11[i][j];
            C[i][j + newSize] = C12[i][j];
            C[i + newSize][j] = C21[i][j];
            C[i + newSize][j + newSize] = C22[i][j];
        }
    }
}

int main() {
    int n;
    printf("Enter the size of the matrix (must be a square matrix): ");
    scanf("%d", &n);

    int **A = (int **)malloc(n * sizeof(int *));
    int **B = (int **)malloc(n * sizeof(int *));
    int **C = (int **)malloc(n * sizeof(int *));
    for (int i = 0; i < n; i++) {
        A[i] = (int *)malloc(n * sizeof(int));
        B[i] = (int *)malloc(n * sizeof(int));
        C[i] = (int *)malloc(n * sizeof(int));
    }

    printf("Enter elements of matrix A:\n");
    for (int i = 0; i < n; i++)
        for (int j = 0; j < n; j++)
            scanf("%d", &A[i][j]);

    printf("Enter elements of matrix B:\n");
    for (int i = 0; i < n; i++)
        for (int j = 0; j < n; j++)
            scanf("%d", &B[i][j]);

    strassenMultiply(n, A, B, C);

    printf("Resultant matrix C:\n");
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++)
            printf("%d ", C[i][j]);
        printf("\n");
    }

    return 0;
}
